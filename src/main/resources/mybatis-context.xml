<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass">
			<value>${spring.datasource.driver-class-name}</value>
		</property>
		<property name="jdbcUrl">
			<value>${spring.datasource.url}</value>
		</property>
		<property name="user">
			<value>${spring.datasource.username}</value>
		</property>
		<property name="password">
			<value>${spring.datasource.password}</value>
		</property>
		<property name="maxPoolSize" value="100" />
		<property name="minPoolSize" value="3" />
		<property name="checkoutTimeout" value="5000" />
		<property name="maxStatements" value="0" />
		<property name="idleConnectionTestPeriod" value="150" />
		<property name="acquireIncrement" value="25" />
		<property name="maxIdleTime" value="400" />
	</bean> -->
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	     <!-- 初始化连接数量 -->        
	   <property name="initialSize" value="${jdbc.initialSize}" />       
	    <!-- 最大并发连接数 -->        
	   <property name="maxActive" value="${jdbc.maxActive}" />                     
	    <!-- 最小空闲连接数 -->        
	    <property name="minIdle" value="${jdbc.minIdle}" />         
	    <!-- 配置获取连接等待超时的时间 -->              
	    <property name="maxWait" value="${jdbc.maxWait}" />         
	    <!-- 超过时间限制是否回收 -->        
	    <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />         
	    <!-- 超过时间限制多长； -->        
	    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />         
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->       
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />     
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->        
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />         
	    <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->         
	    <property name="validationQuery" value="${jdbc.validationQuery}" />        
	    <!-- 申请连接的时候检测 -->        
	    <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />         
	    <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->        
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />         
	    <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->        
	    <property name="testOnReturn" value="${jdbc.testOnReturn}" />         
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->        
	    <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />              
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />         
	    <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j                防御SQL注入的filter:wall -->        
	    <property name="filters" value="log4j2" />               
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="typeAliasesPackage"
			value="com.persistence.table" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="com.persistence.mapper.**.xml"></property>
 		<property name="plugins">
			<array>
				<bean class="com.persistence.plugin.PagingInterceptor"></bean>
			</array>
		</property>
	</bean>

	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0">
			<ref bean="sqlSessionFactory" />
		</constructor-arg>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.persistence.mapper"></property>
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>  
